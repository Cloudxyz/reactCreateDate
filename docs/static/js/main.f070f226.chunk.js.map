{"version":3,"sources":["components/Form.js","components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Form","createDate","useState","mascota","propietario","fecha","hora","sintomas","cita","updateDate","error","updateError","updateState","e","target","name","value","console","log","className","onSubmit","preventDefault","trim","id","uuidv4","type","placeholder","onChange","cols","rows","Cita","eliminarCita","onClick","App","citasInit","JSON","parse","localStorage","getItem","citas","saveDates","useEffect","setItem","stringify","nuevasCitas","filter","title","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f070f226.chunk.js","sourcesContent":["import React, { Fragment, useState} from 'react';\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Form = ({createDate}) => {\r\n\r\n    //Crear State de Citas\r\n    const [cita, updateDate] = useState({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha:'',\r\n        hora:'',\r\n        sintomas:''\r\n    });\r\n\r\n    const [error, updateError] = useState(false);\r\n\r\n    // Función que se ejecuta cada que el usuario escribe en el input\r\n    const updateState = e =>{\r\n        updateDate({\r\n            ...cita,\r\n            [e.target.name]: e.target.value\r\n        })\r\n        console.log('Escribiendo puto');\r\n    }\r\n\r\n    // Extraer los valores\r\n    const { mascota, propietario, fecha, hora, sintomas } = cita;\r\n\r\n    // Cuando el usuario presiona el boton\r\n    const submitDate = e => {\r\n        e.preventDefault();\r\n        updateError(false);\r\n        // Validar la información Obtenida\r\n        if(mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === ''){\r\n            updateError(true);\r\n            return;\r\n        }\r\n\r\n        // Asignar un ID\r\n        cita.id = uuidv4();\r\n\r\n        // Crear la Cita\r\n        createDate(cita);\r\n\r\n        // Reinicar el form\r\n        updateDate({\r\n            mascota: '',\r\n            propietario: '',\r\n            fecha:'',\r\n            hora:'',\r\n            sintomas:''\r\n        })\r\n    }\r\n\r\n    return(\r\n        <Fragment>\r\n            <h2>Crear Cita</h2>\r\n            { error? <p className=\"alerta-error\">Todos los campos son obligatorios</p>:null}\r\n            <form onSubmit={submitDate}>\r\n                <label>Nombre Mascota</label>\r\n                <input type=\"text\" name=\"mascota\" className=\"u-full-width\" placeholder=\"Nombre completo de la mascota\" onChange={updateState} value={mascota}/>\r\n\r\n                <label>Nombre Dueño</label>\r\n                <input type=\"text\" name=\"propietario\" className=\"u-full-width\" placeholder=\"Nombre completo del dueño\" onChange={updateState} value={propietario}/>\r\n\r\n                <label>Fecha</label>\r\n                <input type=\"date\" name=\"fecha\" className=\"u-full-width\" onChange={updateState} value={fecha}/>\r\n\r\n                <label>Hora</label>\r\n                <input type=\"time\" name=\"hora\" className=\"u-full-width\" onChange={updateState} value={hora}/>\r\n\r\n                <label>Sintomas</label>\r\n                <textarea name=\"sintomas\" cols=\"30\" rows=\"10\" className=\"u-full-width\" onChange={updateState} value={sintomas}></textarea>\r\n\r\n                <button type=\"submit\" className=\"u-full-width button-primary\">Agendar Cita</button>\r\n            </form>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nForm.propTypes = {\r\n    createDate: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cita = ({cita, eliminarCita}) => {\r\n    return (\r\n        <div className=\"cita\">\r\n            <p>Mascota: <span>{cita.mascota}</span></p>\r\n            <p>Dueño: <span>{cita.propietario}</span></p>\r\n            <p>Fecha: <span>{cita.fecha}</span></p>\r\n            <p>Hora: <span>{cita.hora}</span></p>\r\n            <p>Sintomas: <span>{cita.sintomas}</span></p>\r\n            <button className=\"button eliminar u-full-width\" onClick={() => eliminarCita(cita.id)}>\r\n                Eliminar &times;\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Cita;","import React, { Fragment, useState, useEffect } from \"react\";\nimport Form from './components/Form';\nimport Cita from './components/Cita';\n\nfunction App() {\n\n  let citasInit = JSON.parse(localStorage.getItem('citas'));\n  if(!citasInit){\n    citasInit = [];\n  }\n  const [citas, saveDates] = useState(citasInit);\n\n  // El useEffect es como el documentReady\n  useEffect( () => {\n    if(citasInit){\n      localStorage.setItem('citas', JSON.stringify(citas));\n    }else{\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }, [citas, citasInit]);\n\n  // Function que toma las citas actuales y agregue la nueva\n  const createDate = cita => {\n    saveDates([\n      ...citas,\n      cita\n    ]);\n  }\n\n  // Function eliminar cita\n  const eliminarCita = id => {\n    const nuevasCitas = citas.filter(cita => cita.id !== id);\n    saveDates(nuevasCitas);\n  }\n\n  const title = citas.length > 0 ? 'Administra tus citas' : 'Agrega una cita';\n\n  return (\n    <Fragment>\n      <h1>Administrador de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Form createDate={createDate} />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{title}</h2>\n            {citas.map(cita => (\n              <Cita\n                key={cita.id}\n                cita={cita}\n                eliminarCita={eliminarCita}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}